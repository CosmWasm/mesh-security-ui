{
  "contract_name": "mesh-provider",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "consumer",
      "lockup",
      "slasher",
      "unbonding_period"
    ],
    "properties": {
      "consumer": {
        "$ref": "#/definitions/ConsumerInfo"
      },
      "lockup": {
        "description": "Address of Lockup contract from which we accept ReceiveClaim",
        "type": "string"
      },
      "slasher": {
        "description": "data to instantiate the slasher",
        "allOf": [
          {
            "$ref": "#/definitions/SlasherInfo"
          }
        ]
      },
      "unbonding_period": {
        "description": "Unbonding period of the remote chain in seconds",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "ConsumerInfo": {
        "type": "object",
        "required": [
          "connection_id"
        ],
        "properties": {
          "connection_id": {
            "description": "We can add port later if we have it, for now, just assert the chain we talk with",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SlasherInfo": {
        "type": "object",
        "required": [
          "code_id",
          "msg"
        ],
        "properties": {
          "code_id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "slash"
        ],
        "properties": {
          "slash": {
            "type": "object",
            "required": [
              "force_unbond",
              "percentage",
              "validator"
            ],
            "properties": {
              "force_unbond": {
                "description": "do we forcibly unbond this validator on the provider side, regardless of the behavior of the consumer?",
                "type": "boolean"
              },
              "percentage": {
                "description": "what percentage we should slash all stakers",
                "allOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  }
                ]
              },
              "validator": {
                "description": "which validator to slash",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "This gives the receiver access to slash part up to this much claim",
        "type": "object",
        "required": [
          "receive_claim"
        ],
        "properties": {
          "receive_claim": {
            "type": "object",
            "required": [
              "amount",
              "owner",
              "validator"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "owner": {
                "type": "string"
              },
              "validator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Triggers the unbonding period for your staked tokens",
        "type": "object",
        "required": [
          "unstake"
        ],
        "properties": {
          "unstake": {
            "type": "object",
            "required": [
              "amount",
              "validator"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "validator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Called after unbonding_period has passed from Unstake. Releases claim on lockup contract",
        "type": "object",
        "required": [
          "unbond"
        ],
        "properties": {
          "unbond": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "how much this account has staked where",
        "type": "object",
        "required": [
          "account"
        ],
        "properties": {
          "account": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Details of one validator",
        "type": "object",
        "required": [
          "validator"
        ],
        "properties": {
          "validator": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Details of one validator",
        "type": "object",
        "required": [
          "list_validators"
        ],
        "properties": {
          "list_validators": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "account": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AccountResponse",
      "type": "object",
      "required": [
        "staked"
      ],
      "properties": {
        "staked": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StakeInfo"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "StakeInfo": {
          "type": "object",
          "required": [
            "slashed",
            "tokens",
            "validator"
          ],
          "properties": {
            "slashed": {
              "$ref": "#/definitions/Uint128"
            },
            "tokens": {
              "$ref": "#/definitions/Uint128"
            },
            "validator": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "consumer"
      ],
      "properties": {
        "consumer": {
          "$ref": "#/definitions/ConsumerInfo"
        },
        "slasher": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ConsumerInfo": {
          "type": "object",
          "required": [
            "connection_id"
          ],
          "properties": {
            "connection_id": {
              "description": "We can add port later if we have it, for now, just assert the chain we talk with",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "list_validators": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ListValidatorsResponse",
      "type": "object",
      "required": [
        "validators"
      ],
      "properties": {
        "validators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidatorResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "ValStatus": {
          "type": "string",
          "enum": [
            "Active",
            "Removed",
            "Tombstoned"
          ]
        },
        "ValidatorResponse": {
          "type": "object",
          "required": [
            "address",
            "multiplier",
            "status",
            "tokens"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "multiplier": {
              "$ref": "#/definitions/Decimal"
            },
            "status": {
              "$ref": "#/definitions/ValStatus"
            },
            "tokens": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "validator": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ValidatorResponse",
      "type": "object",
      "required": [
        "address",
        "multiplier",
        "status",
        "tokens"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "multiplier": {
          "$ref": "#/definitions/Decimal"
        },
        "status": {
          "$ref": "#/definitions/ValStatus"
        },
        "tokens": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "ValStatus": {
          "type": "string",
          "enum": [
            "Active",
            "Removed",
            "Tombstoned"
          ]
        }
      }
    }
  }
}
