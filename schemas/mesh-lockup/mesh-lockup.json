{
  "contract_name": "mesh-lockup",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "denom"
    ],
    "properties": {
      "denom": {
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Places tokens in Lockup so they can be staked in multiple contracts. Must be sent in funds and proper denom",
        "type": "object",
        "required": [
          "bond"
        ],
        "properties": {
          "bond": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraws tokens from Lockup. Only works if the account has sufficient funds that is not backing open claims",
        "type": "object",
        "required": [
          "unbond"
        ],
        "properties": {
          "unbond": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "This gives a claim on my balance to leinholder, granting it to a given validator",
        "type": "object",
        "required": [
          "grant_claim"
        ],
        "properties": {
          "grant_claim": {
            "type": "object",
            "required": [
              "amount",
              "leinholder",
              "validator"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "leinholder": {
                "type": "string"
              },
              "validator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "This releases a previously received claim without slashing it",
        "type": "object",
        "required": [
          "release_claim"
        ],
        "properties": {
          "release_claim": {
            "type": "object",
            "required": [
              "amount",
              "owner"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "owner": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "This slashes a previously provided claim",
        "type": "object",
        "required": [
          "slash_claim"
        ],
        "properties": {
          "slash_claim": {
            "type": "object",
            "required": [
              "amount",
              "owner"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "owner": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "balance"
        ],
        "properties": {
          "balance": {
            "type": "object",
            "required": [
              "account"
            ],
            "properties": {
              "account": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "balance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BalanceResponse",
      "type": "object",
      "required": [
        "bonded",
        "claims",
        "free"
      ],
      "properties": {
        "bonded": {
          "$ref": "#/definitions/Uint128"
        },
        "claims": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Lein"
          }
        },
        "free": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Lein": {
          "type": "object",
          "required": [
            "amount",
            "leinholder"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "leinholder": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
