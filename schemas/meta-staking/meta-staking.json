{
  "contract_name": "meta-staking",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "This is translated to a [MsgDelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L81-L90). `delegator_address` is automatically filled with the current contract's address.",
        "type": "object",
        "required": [
          "delegate"
        ],
        "properties": {
          "delegate": {
            "type": "object",
            "required": [
              "amount",
              "validator"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "validator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "This is translated to a [MsgUndelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L112-L121). `delegator_address` is automatically filled with the current contract's address.",
        "type": "object",
        "required": [
          "undelegate"
        ],
        "properties": {
          "undelegate": {
            "type": "object",
            "required": [
              "amount",
              "validator"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "validator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "This is translated to a [[MsgWithdrawDelegatorReward](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L42-L50). `delegator_address` is automatically filled with the current contract's address.",
        "type": "object",
        "required": [
          "withdraw_delegator_reward"
        ],
        "properties": {
          "withdraw_delegator_reward": {
            "type": "object",
            "required": [
              "validator"
            ],
            "properties": {
              "validator": {
                "description": "The `validator_address`",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Use for now, only admin can call - later we can remove if x/gov calls SudoMsg directly",
        "type": "object",
        "required": [
          "sudo"
        ],
        "properties": {
          "sudo": {
            "$ref": "#/definitions/SudoMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "SudoMsg": {
        "oneOf": [
          {
            "description": "HACK temporary workaround for the proof of concepy. Governance will fund the meta-staking contract with native tokens. In production, this would be accomplished by something like a generic version of the Superfluid staking module which would be in charge of minting and burning synthetic tokens. Update list of consumers",
            "type": "object",
            "required": [
              "add_consumer"
            ],
            "properties": {
              "add_consumer": {
                "type": "object",
                "required": [
                  "consumer_address",
                  "funds_available_for_staking"
                ],
                "properties": {
                  "consumer_address": {
                    "type": "string"
                  },
                  "funds_available_for_staking": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "remove_consumer"
            ],
            "properties": {
              "remove_consumer": {
                "type": "object",
                "required": [
                  "consumer_address"
                ],
                "properties": {
                  "consumer_address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "AllDelegations will return all delegations by the consumer",
        "type": "object",
        "required": [
          "all_delegations"
        ],
        "properties": {
          "all_delegations": {
            "type": "object",
            "required": [
              "consumer"
            ],
            "properties": {
              "consumer": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns an individual consumer",
        "type": "object",
        "required": [
          "consumer"
        ],
        "properties": {
          "consumer": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns list of consumers",
        "type": "object",
        "required": [
          "consumers"
        ],
        "properties": {
          "consumers": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Delegation will return more detailed info on a particular delegation, defined by delegator/validator pair",
        "type": "object",
        "required": [
          "delegation"
        ],
        "properties": {
          "delegation": {
            "type": "object",
            "required": [
              "consumer",
              "validator"
            ],
            "properties": {
              "consumer": {
                "type": "string"
              },
              "validator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns all validators the consumer delegates to.\n\nThe query response type is `AllValidatorsResponse`.",
        "type": "object",
        "required": [
          "all_validators"
        ],
        "properties": {
          "all_validators": {
            "type": "object",
            "required": [
              "consumer"
            ],
            "properties": {
              "consumer": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "all_delegations": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllDelegationsResponse",
      "description": "DelegationsResponse is data format returned from StakingRequest::AllDelegations query",
      "type": "object",
      "required": [
        "delegations"
      ],
      "properties": {
        "delegations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Delegation"
          }
        }
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Delegation": {
          "description": "Delegation is basic (cheap to query) data about a delegation.\n\nInstances are created in the querier.",
          "type": "object",
          "required": [
            "amount",
            "delegator",
            "validator"
          ],
          "properties": {
            "amount": {
              "description": "How much we have locked in the delegation",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "delegator": {
              "$ref": "#/definitions/Addr"
            },
            "validator": {
              "description": "A validator address (e.g. cosmosvaloper1...)",
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_validators": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllValidatorsResponse",
      "description": "The data format returned from StakingRequest::AllValidators query",
      "type": "object",
      "required": [
        "validators"
      ],
      "properties": {
        "validators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Validator"
          }
        }
      },
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Validator": {
          "description": "Instances are created in the querier.",
          "type": "object",
          "required": [
            "address",
            "commission",
            "max_change_rate",
            "max_commission"
          ],
          "properties": {
            "address": {
              "description": "A validator address (e.g. cosmosvaloper1...)",
              "type": "string"
            },
            "commission": {
              "$ref": "#/definitions/Decimal"
            },
            "max_change_rate": {
              "description": "TODO: what units are these (in terms of time)?",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "max_commission": {
              "$ref": "#/definitions/Decimal"
            }
          }
        }
      }
    },
    "consumer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConsumerInfo",
      "type": "object",
      "required": [
        "available_funds",
        "total_staked"
      ],
      "properties": {
        "available_funds": {
          "$ref": "#/definitions/Uint128"
        },
        "total_staked": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "consumers": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConsumersResponse",
      "type": "object",
      "required": [
        "consumers"
      ],
      "properties": {
        "consumers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConsumerInfo"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ConsumerInfo": {
          "type": "object",
          "required": [
            "available_funds",
            "total_staked"
          ],
          "properties": {
            "available_funds": {
              "$ref": "#/definitions/Uint128"
            },
            "total_staked": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "delegation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DelegationResponse",
      "description": "DelegationResponse is data format returned from StakingRequest::Delegation query",
      "type": "object",
      "properties": {
        "delegation": {
          "anyOf": [
            {
              "$ref": "#/definitions/FullDelegation"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "FullDelegation": {
          "description": "FullDelegation is all the info on the delegation, some (like accumulated_reward and can_redelegate) is expensive to query.\n\nInstances are created in the querier.",
          "type": "object",
          "required": [
            "accumulated_rewards",
            "amount",
            "can_redelegate",
            "delegator",
            "validator"
          ],
          "properties": {
            "accumulated_rewards": {
              "description": "How much we can currently withdraw",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "amount": {
              "description": "How much we have locked in the delegation",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "can_redelegate": {
              "description": "can_redelegate captures how much can be immediately redelegated. 0 is no redelegation and can_redelegate == amount is redelegate all but there are many places between the two",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "delegator": {
              "$ref": "#/definitions/Addr"
            },
            "validator": {
              "description": "A validator address (e.g. cosmosvaloper1...)",
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
