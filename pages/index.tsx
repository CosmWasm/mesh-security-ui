import { useEffect, useState, useMemo } from 'react';
import { useWallet } from '@cosmos-kit/react';
import { assets } from 'chain-registry';
import { AssetList, Asset } from '@chain-registry/types';

// import cosmwasm client generated with cosmwasm-ts-codegen
import { HackCw20QueryClient } from '../codegen/HackCw20.client';

import {
  Box,
  Divider,
  Grid,
  Heading,
  Text,
  Stack,
  Container,
  Link,
  Button,
  Flex,
  Icon,
  useColorMode,
  useColorModeValue
} from '@chakra-ui/react';
import { BsFillMoonStarsFill, BsFillSunFill } from 'react-icons/bs';
import { dependencies, products } from '../config';

import { WalletStatus } from '@cosmos-kit/core';
import { Product, Dependency, WalletSection } from '../components';
import Head from 'next/head';

const library = {
  title: 'OsmoJS',
  text: 'OsmoJS',
  href: 'https://github.com/osmosis-labs/osmojs'
};

// const chainName = 'osmosis';
const chainName = 'osmosistestnet';
const chainassets: AssetList = assets.find(
  (chain) => chain.chain_name === chainName
) as AssetList;
const coin: Asset = chainassets.assets.find(
  (asset) => asset.base === 'uosmo'
) as Asset;

export default function Home() {
  const { colorMode, toggleColorMode } = useColorMode();

  const {
    getStargateClient,
    getCosmWasmClient,
    address,
    setCurrentChain,
    currentWallet,
    walletStatus
  } = useWallet();

  useEffect(() => {
    setCurrentChain(chainName);
  }, [chainName]);

  const color = useColorModeValue('primary.500', 'primary.200');

  // get cw20 balance
  const [cw20Client, setCw20Client] = useState<HackCw20QueryClient | null>(
    null
  );
  useEffect(() => {
    getCosmWasmClient().then((cosmwasmClient) => {
      if (!cosmwasmClient || !address) {
        console.error('stargateClient undefined or address undefined.');
        return;
      }

      setCw20Client(
        new HackCw20QueryClient(
          cosmwasmClient,
          'osmo1y0ywcujptlmnx4fgstlqfp7nftc8w5qndsfds9wxwtm0ltjpzp4qdj09j8'
        )
      );
    });
  }, [address, getCosmWasmClient]);
  const [cw20Bal, setCw20Bal] = useState<string | null>(null);
  useEffect(() => {
    if (cw20Client && address) {
      cw20Client
        .balance({
          // TODO: replace with `address` !!!
          address: 'osmo10vcqfvecwmvfr46cn0ju024xz7khutjtdsg5ga'
        })
        .then((b) => setCw20Bal(b.balance));
    }
  }, [cw20Client, address]);

  return (
    <Container maxW="5xl" py={10}>
      <Head>
        <title>Create Cosmos App</title>
        <meta name="description" content="Generated by create cosmos app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex justifyContent="end" mb={4}>
        <Button variant="outline" px={0} onClick={toggleColorMode}>
          <Icon
            as={colorMode === 'light' ? BsFillMoonStarsFill : BsFillSunFill}
          />
        </Button>
      </Flex>
      <Box textAlign="center">
        <Heading
          as="h1"
          fontSize={{ base: '3xl', sm: '4xl', md: '5xl' }}
          fontWeight="extrabold"
          mb={3}
        >
          Create Cosmos App
        </Heading>
        <Heading
          as="h1"
          fontWeight="bold"
          fontSize={{ base: '2xl', sm: '3xl', md: '4xl' }}
        >
          <Text as="span">Welcome to&nbsp;</Text>
          <Text as="span" color={color}>
            CosmosKit + Next.js +{' '}
            <a href={library.href} target="_blank" rel="noreferrer">
              {library.title}
            </a>
          </Text>
        </Heading>
      </Box>
      <WalletSection chainName={chainName} />

      <div>
        HackCW20 Balance:{' '}
        {walletStatus === WalletStatus.Disconnected
          ? 'Connect wallet!'
          : cw20Bal ?? 'loading...'}
      </div>

      {walletStatus === WalletStatus.Disconnected && (
        <Box textAlign="center">
          <Heading
            as="h3"
            fontSize={{ base: '1xl', sm: '2xl', md: '2xl' }}
            fontWeight="extrabold"
            m={30}
          >
            Connect your wallet!
          </Heading>
        </Box>
      )}

      <Dependency key={library.title} {...library}></Dependency>

      <Box mb={3}>
        <Divider />
      </Box>

      <Grid
        templateColumns={{
          md: 'repeat(2, 1fr)',
          lg: 'repeat(3, 1fr)'
        }}
        gap={8}
        mb={14}
      >
        {products.map((product) => (
          <Product key={product.title} {...product}></Product>
        ))}
      </Grid>

      <Grid templateColumns={{ md: '1fr 1fr' }} gap={8} mb={20}>
        {dependencies.map((dependency) => (
          <Dependency key={dependency.title} {...dependency}></Dependency>
        ))}
      </Grid>
      <Box mb={3}>
        <Divider />
      </Box>
      <Stack
        isInline={true}
        spacing={1}
        justifyContent="center"
        opacity={0.5}
        fontSize="sm"
      >
        <Text>Built with</Text>
        <Link
          href="https://cosmology.tech/"
          target="_blank"
          rel="noopener noreferrer"
        >
          Cosmology
        </Link>
      </Stack>
    </Container>
  );
}
