import { useEffect, useState, useMemo } from 'react'
import { useWallet } from '@cosmos-kit/react'
import { chains } from 'chain-registry'

import { Container } from '@chakra-ui/react'

import { WalletStatus } from '@cosmos-kit/core'
import WalletButton from '../components/Wallet'
import Head from 'next/head'
import { humanizeAmount } from 'util/denom'

import { BalanceResponse } from '../codegen/MeshLockup.types'
import { ValidatorResponse } from '../codegen/MeshProvider.types'
import Validator from '../components/Validator'
import { useMeshClient } from 'client'
import { useTx } from 'contexts/tx'
import { BanknotesIcon, LockClosedIcon } from '@heroicons/react/24/outline'
import Spinner from 'components/Spinner'

export default function Home() {
  const { client } = useMeshClient()
  const { tx } = useTx()

  const { address, currentWallet, walletStatus, currentChainName } = useWallet()

  const chain = useMemo(
    () => chains.find((c) => c.chain_name === currentChainName),
    [currentChainName],
  )

  const [bonded, setBonded] = useState<BalanceResponse | null>(null)
  useEffect(() => {
    if (client?.signingCosmWasmClient && address) {
      updateBond(address)
    }
  }, [client?.signingCosmWasmClient, address])

  const updateBond = async (address: string) => {
    try {
      await client?.connectSigning()
      const bonded = await client?.meshLockupClient.balance({
        account: address,
      })!
      setBonded(bonded)
    } catch (e) {
      setBonded({
        bonded: '0',
        free: '0',
        claims: [],
      })
    }
  }

  const [validators, setValidators] = useState<ValidatorResponse[]>([])
  useEffect(() => {
    if (client?.meshProviderClient && address) {
      const updateValidators = async () => {
        const { validators } = await client?.meshProviderClient.listValidators(
          {},
        )
        setValidators(validators)
      }
      updateValidators()
    }
  }, [client?.meshProviderClient, address])

  return (
    <div className="max-w-5xl py-10 mx-auto">
      <Head>
        <title>Osmosis Provider - Mesh Security</title>
        <meta name="description" content="Generated by create cosmos app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="pb-4 text-center">
        <h1 className="mb-3 text-3xl font-extrabold sm:text-4xl md:text-5xl">
          Osmosis Provider
        </h1>
      </div>

      {walletStatus !== WalletStatus.Connected && (
        <div className="max-w-[14rem] mx-auto">
          <WalletButton chainName={currentChainName} />
        </div>
      )}

      {walletStatus === WalletStatus.Connected && (
        <div className="flex flex-col justify-center p-2 mx-auto max-w-[24rem] space-y-2 border rounded-lg sm:flex-row sm:space-x-4 sm:space-y-0 border-black/10 dark:border-white/10">
          <div className="flex flex-row items-center space-x-2">
            <BanknotesIcon className="w-5 h-5 text-black dark:text-white" />
            <p className="flex flex-row items-center font-medium uppercase">
              {client?.wallet?.balance ? (
                humanizeAmount(client?.wallet?.balance?.amount!)
              ) : (
                <Spinner className="w-4 h-4" />
              )}{' '}
              {chain?.bech32_prefix}
            </p>
          </div>
          <div className="flex flex-row items-center space-x-2">
            <LockClosedIcon className="w-5 h-5 text-black dark:text-white" />
            <p className="flex flex-row items-center font-medium uppercase">
              {bonded ? (
                humanizeAmount(bonded.bonded)
              ) : (
                <Spinner className="w-4 h-4" />
              )}{' '}
              {chain?.bech32_prefix}
            </p>
          </div>
        </div>
      )}

      <div>
        <div className="flex flex-col mt-4 space-y-2">
          {validators.map(({ address }, key) => (
            <Validator
              key={key}
              address={address}
              actions={[
                {
                  name: 'Manage',
                  onClick: () => {},
                },
              ]}
            />
          ))}
        </div>
      </div>
    </div>
  )
}
