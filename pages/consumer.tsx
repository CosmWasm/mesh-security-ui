import { useEffect, useState, useMemo } from 'react'
import { useWallet } from '@cosmos-kit/react'
import { chains } from 'chain-registry'
import Button from 'components/Button'
import { WalletStatus } from '@cosmos-kit/core'
import Head from 'next/head'
import { junoContracts } from '../config'
import { WalletButton } from 'components'
import { Delegation } from '../codegen/MetaStaking.types'
import { useMeshClient } from 'client'
import { useCallback } from 'react'
import Validator from 'components/Validator'
import { humanizeAmount } from 'util/denom'

export default function Home() {
  const { walletStatus, currentChainName, currentWallet } = useWallet()

  const chain = useMemo(
    () => chains.find((c) => c.chain_name === currentChainName),
    [currentChainName],
  )

  const { client } = useMeshClient()

  const [delegations, setDelegations] = useState<Delegation[]>([])

  useEffect(() => {
    updateDelegations()
  }, [currentWallet?.address])

  const updateDelegations = useCallback(async () => {
    if (!client?.metaStakingClient) return
    const { delegations } = await client?.metaStakingClient.allDelegations({
      consumer: junoContracts.meshConsumerAddr,
    })
    setDelegations(delegations)
  }, [client?.metaStakingClient])

  return (
    <div className="max-w-5xl py-10 mx-auto">
      <Head>
        <title>Juno Consumer | Mesh Security</title>
        <meta name="description" content="Generated by create cosmos app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="pb-4 text-center">
        <h1 className="mb-3 text-3xl font-extrabold sm:text-4xl md:text-5xl">
          Juno Consumer
        </h1>
      </div>
      <div>
        {walletStatus !== WalletStatus.Connected && (
          <div className="max-w-[14rem] mx-auto">
            <WalletButton chainName={currentChainName} />
          </div>
        )}
      </div>

      <div>
        <div className="flex flex-col items-center sm:flex-row sm:justify-between">
          <h2 className="my-4 text-xl font-semibold">Existing Delegations</h2>
          <Button variant="secondary" onClick={() => updateDelegations()}>
            Refresh Delegations
          </Button>
        </div>
        <div className="flex flex-col mt-4 space-y-2">
          {delegations.map((delegation, key) => (
            <Validator
              key={key}
              address={delegation.validator}
              actions={[
                {
                  name: `${humanizeAmount(delegation.amount.amount)} JUNO`,
                  disabled: true,
                  onClick: () => {},
                },
              ]}
            />
          ))}
        </div>
      </div>
    </div>
  )
}
