/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Binary, InstantiateMsg, ConsumerInfo, SlasherInfo, ExecuteMsg, Decimal, Uint128, QueryMsg, AccountResponse, StakeInfo, ConfigResponse, ValStatus, ListValidatorsResponse, ValidatorResponse } from "./MeshProvider.types";
export interface MeshProviderMessage {
  contractAddress: string;
  sender: string;
  slash: ({
    forceUnbond,
    percentage,
    validator
  }: {
    forceUnbond: boolean;
    percentage: Decimal;
    validator: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  receiveClaim: ({
    amount,
    owner,
    validator
  }: {
    amount: Uint128;
    owner: string;
    validator: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unstake: ({
    amount,
    validator
  }: {
    amount: Uint128;
    validator: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unbond: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class MeshProviderMessageComposer implements MeshProviderMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.slash = this.slash.bind(this);
    this.receiveClaim = this.receiveClaim.bind(this);
    this.unstake = this.unstake.bind(this);
    this.unbond = this.unbond.bind(this);
  }

  slash = ({
    forceUnbond,
    percentage,
    validator
  }: {
    forceUnbond: boolean;
    percentage: Decimal;
    validator: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          slash: {
            force_unbond: forceUnbond,
            percentage,
            validator
          }
        })),
        funds
      })
    };
  };
  receiveClaim = ({
    amount,
    owner,
    validator
  }: {
    amount: Uint128;
    owner: string;
    validator: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive_claim: {
            amount,
            owner,
            validator
          }
        })),
        funds
      })
    };
  };
  unstake = ({
    amount,
    validator
  }: {
    amount: Uint128;
    validator: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unstake: {
            amount,
            validator
          }
        })),
        funds
      })
    };
  };
  unbond = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unbond: {}
        })),
        funds
      })
    };
  };
}