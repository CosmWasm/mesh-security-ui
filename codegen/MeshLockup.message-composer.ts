/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, Uint128, QueryMsg, BalanceResponse, Lein } from "./MeshLockup.types";
export interface MeshLockupMessage {
  contractAddress: string;
  sender: string;
  bond: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unbond: ({
    amount
  }: {
    amount: Uint128;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  grantClaim: ({
    amount,
    leinholder,
    validator
  }: {
    amount: Uint128;
    leinholder: string;
    validator: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  releaseClaim: ({
    amount,
    owner
  }: {
    amount: Uint128;
    owner: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  slashClaim: ({
    amount,
    owner
  }: {
    amount: Uint128;
    owner: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class MeshLockupMessageComposer implements MeshLockupMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.bond = this.bond.bind(this);
    this.unbond = this.unbond.bind(this);
    this.grantClaim = this.grantClaim.bind(this);
    this.releaseClaim = this.releaseClaim.bind(this);
    this.slashClaim = this.slashClaim.bind(this);
  }

  bond = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          bond: {}
        })),
        funds
      })
    };
  };
  unbond = ({
    amount
  }: {
    amount: Uint128;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unbond: {
            amount
          }
        })),
        funds
      })
    };
  };
  grantClaim = ({
    amount,
    leinholder,
    validator
  }: {
    amount: Uint128;
    leinholder: string;
    validator: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          grant_claim: {
            amount,
            leinholder,
            validator
          }
        })),
        funds
      })
    };
  };
  releaseClaim = ({
    amount,
    owner
  }: {
    amount: Uint128;
    owner: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          release_claim: {
            amount,
            owner
          }
        })),
        funds
      })
    };
  };
  slashClaim = ({
    amount,
    owner
  }: {
    amount: Uint128;
    owner: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          slash_claim: {
            amount,
            owner
          }
        })),
        funds
      })
    };
  };
}